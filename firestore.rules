/**
 * @fileoverview Firestore Security Rules for SkillHub application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and role-based access control for courses. Only authenticated users can access their own profile data. Courses are publicly readable but can only be modified by the assigned instructor.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data. Access is restricted to the owning user.
 * - /roles/{roleId}: Stores role definitions and permissions. Intended to be read-only after initial setup (implementation detail to be handled in backend setup).
 * - /courses/{courseId}: Stores course information. Includes `instructorId` to control write access.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Listing of users is disallowed.
 * - Roles are readable by anyone, but should only be created and updated by administrators (handled through other means).
 * - Courses are publicly readable, but only instructors can modify their courses.
 *
 * Denormalization for Authorization:
 * - The `Course` entity includes the `instructorId` to simplify ownership checks for course modifications. This avoids requiring a `get()` operation to a separate user document.
 *
 * Structural Segregation:
 * - No segregation is applied.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the request is made by the user with matching userId (isOwner).
     * @deny (get, create, update, delete) if the request is made by a different user or an unauthenticated user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // isSignedin() check
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to role definitions.  Roles are intended to be read-only after initial setup and read to any user.
     * @path /roles/{roleId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false;
     * @deny create, update, delete: Always deny write operations.
     * @principle Roles are read-only for clients.
     */
    match /roles/{roleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to course information. Courses are publicly readable, but only instructors can modify them.
     * @path /courses/{courseId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn() && request.resource.data.instructorId == request.auth.uid;
     * @allow update: if isSignedIn() && isExistingInstructor(resource.data.instructorId);
     * @allow delete: if isSignedIn() && isExistingInstructor(resource.data.instructorId);
     * @principle Courses are publicly readable, but only instructors can modify them.
     */
    match /courses/{courseId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.instructorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingInstructor(resource.data.instructorId);
      allow delete: if isSignedIn() && isExistingInstructor(resource.data.instructorId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isInstructor(instructorId) {
      return request.auth.uid == instructorId;
    }

    function isExistingInstructor(instructorId) {
        return isInstructor(instructorId) && resource != null;
    }
  }
}