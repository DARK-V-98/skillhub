/**
 * @file Firebase Security Rules for SkillHub application.
 *
 * @core_philosophy This ruleset enforces a user-ownership model for user profiles,
 *  role-based access for roles, and instructor-ownership for courses. It prioritizes
 *  security by default, restricting access unless explicitly granted. Data shape
 *  validation is relaxed to allow for rapid prototyping.
 *
 * @data_structure
 *  - /users/{userId}: Stores user profile data.
 *  - /roles/{roleId}: Stores role definitions and permissions.
 *  - /courses/{courseId}: Stores course information.
 *
 * @key_security_decisions
 *  - Users can only read and write their own profile data.
 *  - Roles can be read by anyone, but only admins can create, update, or delete them. (Not yet implemented).
 *  - Courses are publicly readable, but only instructors (course owners) can modify them.
 *  - User listing is disallowed to prevent information harvesting.
 *
 * @denormalization_for_authorization
 *  - Courses store the instructorId to avoid needing to query for the instructor's role.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data, restricting access to the owning user.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) Signed-in user with UID matching the userId attempts to create their profile.
     * @allow (get, update, delete) Signed-in user with UID matching the userId attempts to read, update or delete their profile.
     * @deny (create) Signed-in user with UID NOT matching the userId attempts to create a profile.
     * @deny (get, update, delete) Signed-in user with UID NOT matching the userId attempts to read, update or delete the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      //function
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages role definitions, allowing read access to all but restricting write access.
     * @path /databases/{database}/documents/roles/{roleId}
     * @allow (get, list) Any user can read role definitions.
     * @deny (create, update, delete) Only admins should be able to manage roles (not yet implemented).
     * @principle Restricts write access to roles, allowing open read access.
     */
    match /roles/{roleId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Implement admin role check for role management.
    }

    /**
     * @description Manages course information, allowing public read access but restricting write access to the instructor.
     * @path /databases/{database}/documents/courses/{courseId}
     * @allow (get, list) Any user can read course information.
     * @allow (create) Signed-in user creates a course with their UID as the instructorId.
     * @allow (update, delete) Signed-in user with UID matching the instructorId attempts to update or delete the course.
     * @deny (create) Signed-in user creates a course with their UID NOT as the instructorId.
     * @deny (update, delete) Signed-in user with UID NOT matching the instructorId attempts to update or delete the course.
     * @principle Enforces instructor-ownership for course modifications.
     */
    match /courses/{courseId} {

      function isInstructor(instructorId) {
        return request.auth != null && request.auth.uid == instructorId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.instructorId == request.auth.uid;
      allow update: if isSignedIn() && isInstructor(resource.data.instructorId);
      allow delete: if isSignedIn() && isInstructor(resource.data.instructorId);
    }
  }
}