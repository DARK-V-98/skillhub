/**
 * @file Firebase Security Rules for SkillHub application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles,
 * restricts role management to authenticated users and
 * allows public read access to courses with owner-only writes.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 * - /roles/{roleId}: Stores role definitions and permissions.
 * - /courses/{courseId}: Stores course information, with public read access but restricted writes.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Role creation/modification is open to authenticated users.
 * - Courses are publicly readable, but creation/modification is restricted to owners,
 *   who must be authenticated.
 *
 * Denormalization for Authorization:
 * - Courses include `instructorId` for easy owner validation during writes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for /users/{userId} documents.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) - User with ID 'user123' creates their own profile.
     *   request.auth.uid == 'user123' and request.resource.data.id == 'user123'
     * @allow (get, update, delete) - User with ID 'user123' reads, updates, or deletes their own profile.
     *   request.auth.uid == 'user123' and resource.data.id == 'user123'
     * @deny (create) - User with ID 'user123' tries to create a profile for 'user456'.
     *   request.auth.uid == 'user123' and request.resource.data.id == 'user456'
     * @deny (update, delete) - User with ID 'user123' tries to update or delete a profile for 'user456'.
     *   request.auth.uid == 'user123' and resource.data.id == 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isNewOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId) && isOwnerIdImmutable(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isNewOwner(userId) {
          return request.auth.uid == userId && request.resource.data.get("id") == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
      }
      
      function isOwnerIdImmutable(userId) {
          return request.resource.data.get("id") == resource.data.id;
      }
    }

    /**
     * @description Allows any authenticated user to read and write Roles.
     * @path /databases/{database}/documents/roles/{roleId}
     * @allow (create, get, list, update, delete) - Any authenticated user.
     *   request.auth.uid != null
     * @deny (create, get, list, update, delete) - Anonymous user.
     *   request.auth.uid == null
     */
    match /roles/{roleId} {
        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to courses, but restricts creation, updates, and deletion to the instructor.
     * @path /databases/{database}/documents/courses/{courseId}
     * @allow (get, list) - Any user (authenticated or not) can read course information.
     *   true
     * @allow (create) - User with ID 'user123' creates a course with instructorId 'user123'.
     *   request.auth.uid == 'user123' and request.resource.data.instructorId == 'user123'
     * @allow (update, delete) - User with ID 'user123' updates or deletes a course where resource.data.instructorId == 'user123'.
     *   request.auth.uid == 'user123' and resource.data.instructorId == 'user123'
     * @deny (create) - User with ID 'user123' creates a course with instructorId 'user456'.
     *   request.auth.uid == 'user123' and request.resource.data.instructorId == 'user456'
     * @deny (update, delete) - User with ID 'user123' tries to update or delete a course where resource.data.instructorId == 'user456'.
     *   request.auth.uid == 'user123' and resource.data.instructorId == 'user456'
     * @principle Allows public reads with owner-only writes, enforcing ownership via instructorId.
     */
    match /courses/{courseId} {
        allow get, list: if true;
        allow create: if isSignedIn() && request.resource.data.get("instructorId") == request.auth.uid;
        allow update: if isSignedIn() && resource.data.instructorId == request.auth.uid;
        allow delete: if isSignedIn() && resource.data.instructorId == request.auth.uid;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}