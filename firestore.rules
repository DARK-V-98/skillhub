/**
 * @file Firestore Security Rules for SkillHub
 *
 * @core_philosophy This ruleset enforces a user-ownership model for user profiles,
 *                  restricts role management, and implements instructor-based access control for courses.
 *                  It prioritizes secure data access and prevents unauthorized modifications.
 *
 * @data_structure - User profiles are stored under `/users/{userId}`.
 *                 - Role definitions are stored in the `/roles/{roleId}` collection.
 *                 - Course information is stored in the `/courses/{courseId}` collection.
 *
 * @key_security_decisions - User listing is disallowed.
 *                           - Only the user themselves can read/write their profile.
 *                           - Course creation/modification is restricted to instructors (owners).
 *                           - Role creation/modification is heavily restricted.
 *
 * @denormalization_for_authorization The `instructorId` field is denormalized in the `/courses/{courseId}` document
 *                                    to allow for efficient instructor-based access control without requiring additional reads.
 *
 * @structural_segregation N/A: All data is segregated by collection. No private/public variants.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create document '/users/user123'
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete document '/users/user123'
     * @deny (create) - User with UID 'user456' cannot create document '/users/user123'
     * @deny (get, update, delete) - User with UID 'user456' cannot read, update, or delete document '/users/user123'
     * @principle Enforces document ownership; users can only access their own profile data.
     */
    match /users/{userId} {
      // isOwner(userId)
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to role definitions.  Very restricted access.
     * @path /roles/{roleId}
     * @allow N/A - All operations are denied in this prototype.
     * @deny (create, get, list, update, delete) - No one can create, read, update, or delete roles.
     * @principle Restricts role management to prevent unauthorized privilege escalation.
     */
    match /roles/{roleId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to course information.
     * @path /courses/{courseId}
     * @allow (get, list) - Anyone can read course information.
     * @allow (create) - User with UID 'teacher123' can create document '/courses/course456' if request.resource.data.instructorId == 'teacher123'
     * @allow (update, delete) - User with UID 'teacher123' can update and delete document '/courses/course456' if resource.data.instructorId == 'teacher123'
     * @deny (create) - User with UID 'student456' cannot create document '/courses/course456'
     * @deny (update, delete) - User with UID 'student456' cannot update or delete document '/courses/course456'
     * @principle Allows public read access but restricts modifications to the course instructor.
     */
    match /courses/{courseId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.instructorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwnerByInstructorId(resource.data.instructorId);
      allow delete: if isSignedIn() && isExistingOwnerByInstructorId(resource.data.instructorId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function isOwnerByInstructorId(instructorId) {
        return request.auth.uid == instructorId;
    }

    function isExistingOwnerByInstructorId(instructorId) {
        return isOwnerByInstructorId(instructorId) && resource != null;
    }
  }
}